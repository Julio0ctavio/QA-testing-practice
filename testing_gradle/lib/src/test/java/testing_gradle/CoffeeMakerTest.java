/*
 * This Java source file was generated by the Gradle 'init' task.
 * 
 * Autor = Julio Lozano 6/4/2022
 *
*/

package testing_gradle;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.fail;

import org.junit.jupiter.api.Assertions;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import testing_gradle.exceptions.InventoryException;
import testing_gradle.exceptions.RecipeException;

@SuppressWarnings("unused")
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class CoffeeMakerTest
{

	private CoffeeMaker coffeeMaker;
	private Recipe recipe1;
	private Recipe recipe2;
	private Recipe recipe3;
	private Recipe recipe4;
	private Recipe recipe5;
	private Recipe recipe6;

	@BeforeAll
	public void setUp() throws RecipeException {
		coffeeMaker = new CoffeeMaker();
		
		//Set up for r1
		recipe1 = new Recipe();
		recipe1.setName("Coffee");
		recipe1.setAmtChocolate("0");
		recipe1.setAmtCoffee("3");
		recipe1.setAmtMilk("1");
		recipe1.setAmtSugar("1");
		recipe1.setPrice("50");
		
		//Set up for r2
		recipe2 = new Recipe();
		recipe2.setName("Mocha");
		recipe2.setAmtChocolate("10");
		recipe2.setAmtCoffee("3");
		recipe2.setAmtMilk("1");
		recipe2.setAmtSugar("1");
		recipe2.setPrice("75");
		
		//Set up for r3
		recipe3 = new Recipe();
		recipe3.setName("Latte");
		recipe3.setAmtChocolate("0");
		recipe3.setAmtCoffee("3");
		recipe3.setAmtMilk("3");
		recipe3.setAmtSugar("5");
		recipe3.setPrice("100");
		
		//Set up for r4
		recipe4 = new Recipe();
		recipe4.setName("Hot Chocolate");
		recipe4.setAmtChocolate("4");
		recipe4.setAmtCoffee("0");
		recipe4.setAmtMilk("17");
		recipe4.setAmtSugar("40");
		recipe4.setPrice("65");
		
		coffeeMaker.addRecipe(recipe1);
		coffeeMaker.addRecipe(recipe2);
		coffeeMaker.addRecipe(recipe3);
		coffeeMaker.addRecipe(recipe4);
		
		
	} 


	@Test
	public void addInventoryTest()
	{
		String inv = coffeeMaker.checkInventory();
		System.out.println("");
		System.out.println("Initial Inventory");
		System.out.println(inv);

		int initialCoffee = getIngredientCount(inv,"Coffee");
		int initialMilk = getIngredientCount(inv,"Milk");
		int initialSugar = getIngredientCount(inv,"Sugar");
		int initialChocolate = getIngredientCount(inv,"Chocolate");

		try
		{
			coffeeMaker.addInventory("10","30","20","100");
		}
		catch (InventoryException e)
		{
			fail("InventoryException should not be thrown");
		}

		inv = coffeeMaker.checkInventory();
		System.out.println("Final Inventory");
		System.out.println(inv);

		int finalCoffee = getIngredientCount(inv,"Coffee");
		int finalMilk = getIngredientCount(inv,"Milk");
		int finalSugar = getIngredientCount(inv,"Sugar");
		int finalChocolate = getIngredientCount(inv,"Chocolate");

		assertEquals((initialCoffee + 10),finalCoffee );
		assertEquals((initialMilk + 30), finalMilk );
		assertEquals((initialSugar + 20), finalSugar );
		assertEquals((initialChocolate + 100), finalChocolate );

	}


	private int getIngredientCount(String inventory, String searchIngred)
	{
		int rv = -1;
		String[] allIngred = inventory.split("\n");
		for (int i = 0; i < allIngred.length; i ++)
		{
			if (allIngred[i].contains(searchIngred) && allIngred[i].contains(":"))
			{
				String[] singleIngred = allIngred[i].split(":");
				rv = Integer.parseInt(singleIngred[1].trim());
			} // End of if - finding our ingredient and setting return
		} // End of for looping through ingredients
		return rv;

	} 


	@Test
	public void addRecipeTest() throws Exception
	{
		Recipe [] recipeArray = coffeeMaker.getRecipes();
		
		assertEquals(recipeArray[0].getName(),"Coffee");
		assertEquals(recipeArray[0].getAmtChocolate(),0);
		assertEquals(recipeArray[0].getAmtCoffee(),3);
		assertEquals(recipeArray[0].getAmtMilk(),1);
		assertEquals(recipeArray[0].getAmtSugar(),1);
		assertEquals(recipeArray[0].getPrice(),50);

		assertEquals(recipeArray[1].getName(),"Mocha");
		assertEquals(recipeArray[1].getAmtChocolate(),10);
		assertEquals(recipeArray[1].getAmtCoffee(),3);
		assertEquals(recipeArray[1].getAmtMilk(),1);
		assertEquals(recipeArray[1].getAmtSugar(),1);
		assertEquals(recipeArray[1].getPrice(),75);

	} 


	@Test
	public void editRecipeTest() throws Exception
	{
		//addRecipes();
		Recipe [] recipeArray = coffeeMaker.getRecipes();

		// Ensure that the recipe exists prior to editing it
		assertEquals(recipeArray[0].getName(),"Coffee");

		//Set up for r5
		recipe5 = new Recipe();
		recipe5.setName("CoffeeSpecial");
		recipe5.setAmtChocolate("4");
		recipe5.setAmtCoffee("12");
		recipe5.setAmtMilk("2");
		recipe5.setAmtSugar("5");
		recipe5.setPrice("100");

		String result = coffeeMaker.editRecipe(0, recipe5);

		recipeArray = coffeeMaker.getRecipes();

		// Ensure that the new recipe does exist
		assertEquals(recipeArray[0].getName(),"CoffeeSpecial" );

	} 
	

	@Test
	public void makeCoffeeTest() throws Exception
	{
		int result;

		// Recipe does not exist return money entered
		result = coffeeMaker.makeCoffee(4,20);
		assertEquals(result,20);

		// Enough money supplied. Make Mocha and return the change. Price is 75		
		result = coffeeMaker.makeCoffee(1,100);
		assertEquals(result,25);
		//assertNull(coffeeMaker.getRecipes()[1]);
		
		// Not enough money given, return money entered - Price is 75
		result = coffeeMaker.makeCoffee(1,10);
		assertEquals(result,10);

		// Enough money supplied, but we ran out of sugar so refund the amount
		result = coffeeMaker.makeCoffee(3,65);
		assertEquals(result,65);
		
		//Trying with the first recipe
		result = coffeeMaker.makeCoffee(0, 60);
		assertEquals(result,10);
		

	} 
	

	@Test
	public void addInventoryExceptionTest() throws InventoryException
	{
		assertThrows(InventoryException.class, () -> coffeeMaker.addInventory("4", "-1", "asdf", "3"));
	} 
	
	
	@Test
	public void recipeExceptionTest() throws RecipeException
	{
		//Set up for r4
		recipe6 = new Recipe();
		recipe6.setName("Chocolate");
		assertThrows(RecipeException.class, () -> recipe6.setAmtChocolate("-1"));
	} 
	
	
	@Test
	public void deleteRecipeTest() throws Exception
	{
		Recipe [] recipeArray = coffeeMaker.getRecipes();
		// Ensure that the recipe does exist prior to deleting it
		assertEquals(recipeArray[0].getName(),"Coffee");

		// Ensure that the recipe does NOT exist after deleting it
		assertEquals(coffeeMaker.deleteRecipe(0),"Coffee");
		recipeArray = coffeeMaker.getRecipes();
		assertNull(recipeArray[0]);
		
		//We have to add this recipe again because this test case will affect the recipes array for CoffeeMaker class
		coffeeMaker.addRecipe(recipe1);
	}

	
} 
